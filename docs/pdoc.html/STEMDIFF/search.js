window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "stemdiff", "modulename": "stemdiff", "type": "module", "doc": "<h2 id=\"stemdiff-package\">STEMDIFF package</h2>\n\n<p>Conversion of 4D-STEM dataset to single 2D-powder diffration pattern.</p>\n\n<ul>\n<li>4D-STEM dataset\n<ul>\n<li>A set of datafiles from 2D-array STEM detector (aka pixelated detector).</li>\n<li>Each datafile is a monocrystalline-like nanobeam diffraction pattern.</li>\n</ul></li>\n<li>STEMDIFF processing of 4D-STEM dataset\n<ul>\n<li>The 4D-STEM dataset is huge, complex, and hard to process...</li>\n<li>STEMDIFF reduces the 4D-dataset to 2D powder diffraction patern.</li>\n<li>The 2D difractogram is then readily converted to a 1D diffractogram.</li>\n<li>Both 2D and 1D powder diffraction patterns are quite easy to process.</li>\n<li>This is called <strong>4D-STEM/PNBD method</strong>:\n<a href=\"https://doi.org/10.3390/ma14247550\"><a href=\"https://doi.org/10.3390/ma14247550\">https://doi.org/10.3390/ma14247550</a></a></li>\n</ul></li>\n</ul>\n\n<p>Typical usage of STEMDIFF package is shown in the code block below.</p>\n\n<ul>\n<li>The code may look complex at first sight...</li>\n<li>but it is quite simple, well-commented, and universal template...</li>\n<li>which can be used (with minor modifications) to arbitrary 4D-STEM dataset.</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># STEMDIFF = convert a 4D-STEM datacube to a powder electron diffractogram</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Usage: edit input parameters in section [0] and run the script</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Help (in Spyder): place cursor on a keyword below and press Ctrl+I</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">stemdiff.const</span><span class=\"o\">,</span> <span class=\"nn\">stemdiff.io</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">stemdiff.dbase</span><span class=\"o\">,</span> <span class=\"nn\">stemdiff.psf</span><span class=\"o\">,</span> <span class=\"nn\">stemdiff.sum</span><span class=\"o\">,</span> <span class=\"nn\">stemdiff.radial</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[0] Define parameters&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Data directory and datafiles (this must be adjusted)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">DATAFILES</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">&#39;../DATA&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">glob</span><span class=\"p\">(</span><span class=\"s1\">&#39;*.dat&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Calculation parameters (arguments can be adjusted/optimized)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">CENTERING</span> <span class=\"o\">=</span> <span class=\"n\">stemdiff</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">centering</span><span class=\"p\">(</span><span class=\"n\">ctype</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">csquare</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">cintensity</span><span class=\"o\">=</span><span class=\"mf\">0.8</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SUMMATION</span> <span class=\"o\">=</span> <span class=\"n\">stemdiff</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">summation</span><span class=\"p\">(</span><span class=\"n\">psfsize</span><span class=\"o\">=</span><span class=\"mi\">130</span><span class=\"p\">,</span> <span class=\"n\">imgsize</span><span class=\"o\">=</span><span class=\"mi\">125</span><span class=\"p\">,</span> <span class=\"n\">iterate</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Basic output files (other outputs are specified in the functions below)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">DBASE</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1_database.zip&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PSF</span>   <span class=\"o\">=</span> <span class=\"s1\">&#39;2_psf.npy&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[1] Prepare database&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">stemdiff</span><span class=\"o\">.</span><span class=\"n\">dbase</span><span class=\"o\">.</span><span class=\"n\">calc_database</span><span class=\"p\">(</span><span class=\"n\">DATAFILES</span><span class=\"p\">,</span><span class=\"n\">CENTERING</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stemdiff</span><span class=\"o\">.</span><span class=\"n\">dbase</span><span class=\"o\">.</span><span class=\"n\">plot_entropy_histogram</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stemdiff</span><span class=\"o\">.</span><span class=\"n\">dbase</span><span class=\"o\">.</span><span class=\"n\">save_database</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">output_file</span> <span class=\"o\">=</span> <span class=\"n\">DBASE</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[2] Calculate 2D-PSF = point spread function&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">psf</span> <span class=\"o\">=</span> <span class=\"n\">stemdiff</span><span class=\"o\">.</span><span class=\"n\">psf</span><span class=\"o\">.</span><span class=\"n\">psf_from_lowS_files</span><span class=\"p\">(</span><span class=\"n\">DBASE</span><span class=\"p\">,</span><span class=\"n\">SUMMATION</span><span class=\"p\">,</span> <span class=\"n\">P</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stemdiff</span><span class=\"o\">.</span><span class=\"n\">psf</span><span class=\"o\">.</span><span class=\"n\">plot_psf</span><span class=\"p\">(</span><span class=\"n\">psf</span><span class=\"p\">,</span> <span class=\"n\">plt_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;3D&#39;</span><span class=\"p\">,</span> <span class=\"n\">plt_size</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stemdiff</span><span class=\"o\">.</span><span class=\"n\">psf</span><span class=\"o\">.</span><span class=\"n\">save_psf</span><span class=\"p\">(</span><span class=\"n\">psf</span><span class=\"p\">,</span> <span class=\"n\">output_file</span> <span class=\"o\">=</span> <span class=\"n\">PSF</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[3a] Sum all files&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">arr1</span> <span class=\"o\">=</span> <span class=\"n\">stemdiff</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"o\">.</span><span class=\"n\">sum_all</span><span class=\"p\">(</span><span class=\"n\">DBASE</span><span class=\"p\">,</span><span class=\"n\">SUMMATION</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stemdiff</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"o\">.</span><span class=\"n\">save_results</span><span class=\"p\">(</span><span class=\"n\">arr1</span><span class=\"p\">,</span> <span class=\"n\">icut</span><span class=\"o\">=</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"n\">itype</span><span class=\"o\">=</span><span class=\"s1\">&#39;8bit&#39;</span><span class=\"p\">,</span> <span class=\"n\">output</span><span class=\"o\">=</span><span class=\"s1\">&#39;3_sum_all&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[3b] Sum high entropy files&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">arr2</span> <span class=\"o\">=</span> <span class=\"n\">stemdiff</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"o\">.</span><span class=\"n\">sum_highS</span><span class=\"p\">(</span><span class=\"n\">DBASE</span><span class=\"p\">,</span><span class=\"n\">SUMMATION</span><span class=\"p\">,</span> <span class=\"n\">P</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stemdiff</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"o\">.</span><span class=\"n\">save_results</span><span class=\"p\">(</span><span class=\"n\">arr2</span><span class=\"p\">,</span> <span class=\"n\">icut</span><span class=\"o\">=</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"n\">itype</span><span class=\"o\">=</span><span class=\"s1\">&#39;8bit&#39;</span><span class=\"p\">,</span> <span class=\"n\">output</span><span class=\"o\">=</span><span class=\"s1\">&#39;3_sum_hs&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[3c] Sum high entropy files with deconvolution&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">arr3</span> <span class=\"o\">=</span> <span class=\"n\">stemdiff</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"o\">.</span><span class=\"n\">sum_highS_deconv</span><span class=\"p\">(</span><span class=\"n\">DBASE</span><span class=\"p\">,</span><span class=\"n\">SUMMATION</span><span class=\"p\">,</span><span class=\"n\">PSF</span><span class=\"p\">,</span> <span class=\"n\">P</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stemdiff</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"o\">.</span><span class=\"n\">save_results</span><span class=\"p\">(</span><span class=\"n\">arr3</span><span class=\"p\">,</span> <span class=\"n\">icut</span><span class=\"o\">=</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"n\">itype</span><span class=\"o\">=</span><span class=\"s1\">&#39;8bit&#39;</span><span class=\"p\">,</span> <span class=\"n\">output</span><span class=\"o\">=</span><span class=\"s1\">&#39;3_sum_hsd&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[4] Plot radial distributions&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stemdiff</span><span class=\"o\">.</span><span class=\"n\">radial</span><span class=\"o\">.</span><span class=\"n\">plot_radial_distributions</span><span class=\"p\">([</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"p\">[</span><span class=\"s1\">&#39;3_sum_all.txt&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;k:&#39;</span><span class=\"p\">,</span>  <span class=\"s1\">&#39;All data&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"p\">[</span><span class=\"s1\">&#39;3_sum_hs.txt&#39;</span><span class=\"p\">,</span>  <span class=\"s1\">&#39;b--&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;S-filtering&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"p\">[</span><span class=\"s1\">&#39;3_sum_hsd.txt&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;r-&#39;</span><span class=\"p\">,</span>  <span class=\"s1\">&#39;S-filtering + deconv&#39;</span><span class=\"p\">]],</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">xlimit</span><span class=\"o\">=</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"n\">ylimit</span><span class=\"o\">=</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"n\">output</span><span class=\"o\">=</span><span class=\"s1\">&#39;4_radial_dist.png&#39;</span><span class=\"p\">)</span>\n</code></pre></div>\n"}, {"fullname": "stemdiff.const", "modulename": "stemdiff.const", "type": "module", "doc": "<h2 id=\"stemdiffconst\">stemdiff.const</h2>\n\n<p>Constants for package stemdiff.</p>\n"}, {"fullname": "stemdiff.const.DET_SIZE", "modulename": "stemdiff.const", "qualname": "DET_SIZE", "type": "variable", "doc": "<p>DET_SIZE = size of pixelated detector (in pixels :-)</p>\n", "default_value": " = 256"}, {"fullname": "stemdiff.const.RESCALE", "modulename": "stemdiff.const", "qualname": "RESCALE", "type": "variable", "doc": "<p>RESCALE = scaling coefficient: final image size = DET_SIZE * RESCALE</p>\n", "default_value": " = 4"}, {"fullname": "stemdiff.const.centering", "modulename": "stemdiff.const", "qualname": "centering", "type": "class", "doc": "<p>Set parameters for determination of center of 4D-STEM datafiles.</p>\n\n<h2 id=\"typical-usage\">Typical usage</h2>\n\n<p>In a script, use the following two commands:</p>\n\n<pre><code>&gt;&gt;&gt; import stemdiff.const\n&gt;&gt;&gt; CENTERING = stemdiff.const.centering(\n&gt;&gt;&gt;     ctype=1,csquare=30,cintensity=0.8)\n</code></pre>\n\n<p>Typical values of the arguments:</p>\n\n<ul>\n<li><code>ctype=1</code> ..fixed center, determined from the 1st file</li>\n<li><code>csquare=30</code> ..find center in a central square with size 30 pixels </li>\n<li><code>cintensity=0.8</code> ..ignore intensities &lt; 0.8 * maximal intensity</li>\n</ul>\n\n<p>Variable CENTERING, which contains the centering object,\nis usually employed as an argument in the functions\nthat create database of files, determine PSF, and sum datafiles.</p>\n\n<h2 id=\"more-help-detailed-description-of-parameters\">More help &amp; detailed description of parameters</h2>\n\n<p>In a console, type the following two commands:</p>\n\n<pre><code>&gt;&gt;&gt; import stemdiff.const\n&gt;&gt;&gt; help(stemdiff.const.centering)\n</code></pre>\n"}, {"fullname": "stemdiff.const.centering.__init__", "modulename": "stemdiff.const", "qualname": "centering.__init__", "type": "function", "doc": "<p>Initialize parameters for center determination.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>ctype : integer (values: 0, 1, 2)\n    * 0 = intensity center not determined, geometrical center is used\n    * 1 = center determined from the first image and kept constant\n    * 2 = center is determined for each individual image\ncsquare : integer (interval: 10--DET_SIZE)\n    Size of the central square (in pixels),\n    within which the center of intensity is searched for.\ncintensity : float (interval: 0--1)\n    Intensity fraction, which is used for center determination.\n    Example: cintensity=0.9 =&gt; take only pixels &gt; 0.9 * max.intensity.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Centering object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ctype</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">csquare</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">cintensity</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "stemdiff.const.summation", "modulename": "stemdiff.const", "qualname": "summation", "type": "class", "doc": "<p>Set parameters for summation of 4D-STEM datafiles.</p>\n\n<h2 id=\"typical-usage\">Typical usage</h2>\n\n<p>In a script, use the following two commands:</p>\n\n<pre><code>&gt;&gt;&gt; import stemdiff.const\n&gt;&gt;&gt; SUMMATION =\n&gt;&gt;&gt;     stemdiff.const.summation(psfsize=130,imgsize=125,iterate=30)\n</code></pre>\n\n<p>Typical values of the arguments:</p>\n\n<ul>\n<li><code>psfsize=130</code> ..size of a central square for PSF determination\n<ul>\n<li>(psfsize &gt; imgsize) =&gt; minimization of deconvolution artifacts</li>\n</ul></li>\n<li><code>imgsize=125</code> ..size of a central square for summation\n<ul>\n<li>(imgsize &lt; DET_SIZE) =&gt; ignore weak diffraction at the edges</li>\n</ul></li>\n<li><code>iterate=30</code>  ..number of iterations during deconvolution\n<ul>\n<li>(iterate=30) =&gt; good starting point; final number is usually higher</li>\n</ul></li>\n</ul>\n\n<p>Variable SUMMATION, which contains the summation object,\nis usually employed as an argument in the functions\nthat determine PSF and sum datafiles.</p>\n\n<h2 id=\"more-help-detailed-description-of-parameters\">More help &amp; detailed description of parameters</h2>\n\n<p>In a console, use the following two commands:</p>\n\n<pre><code>&gt;&gt;&gt; import stemdiff.const\n&gt;&gt;&gt; help(stemdiff.const.summation)\n</code></pre>\n"}, {"fullname": "stemdiff.const.summation.__init__", "modulename": "stemdiff.const", "qualname": "summation.__init__", "type": "function", "doc": "<p>Initialize parameters for summation.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>psfize : integer (interval: something--DET_SIZE)\n    Size/edge of central square, from which 2D-PSF will be determined.\nimgsize : integer (interval: something --DET_SIZE)\n    Size of array read from the detector is reduced to imgsize.\n    If given, we sum only the central square with size = imgsize.\n    Smaller area = higher speed; outer area = just weak diffractions. <br />\niterate : integer <br />\n    Number of iterations during PSF deconvolution.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Summation object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">psfsize</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">imgsize</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">iterate</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "stemdiff.dbase", "modulename": "stemdiff.dbase", "type": "module", "doc": "<h2 id=\"stemdiffdbase\">stemdiff.dbase</h2>\n\n<p>Functions for the reading of 4D-STEM datafiles\nto create database of all files.</p>\n\n<p>The database contains [filename, S-entropy and XY-center] of each datafile.</p>\n\n<ul>\n<li>The database enables fast filtering of datafiles\nand fast access to datafile features.</li>\n<li>S-entropy = Shannon entropy = a fast-to-calculate image feature;\ndatafiles with high S contain strong diffractions and <em>vice versa</em>.</li>\n<li>XY-center = two values = X- and Y-coordinate of the central spot\n(primary beam) for given datafile.</li>\n</ul>\n"}, {"fullname": "stemdiff.dbase.calc_database", "modulename": "stemdiff.dbase", "qualname": "calc_database", "type": "function", "doc": "<p>Read 4D-STEM datafiles and create database of all files,\nwhich contains [filename, S-entropy and XY-center] for each datafile.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>DATAFILES : glob object\n    Names of all datafiles from 4D-STEM dataset.\n    The [glob object] is usually defined in the master script as follows:</p>\n\n<pre><code>    &gt;&gt;&gt; from pathlib import Path\n    &gt;&gt;&gt; DATA_DIR  = Path('D:/DATA/AU')\n    &gt;&gt;&gt; DATAFILES = DATA_DIR.glob('*.dat')\n</code></pre>\n\n<p>CENTERING : centering object\n    Object containing parameters for finding center of diffractograms.\n    The [centering object] is usually defined in the master script:</p>\n\n<pre><code>    &gt;&gt;&gt; import stemdiff.const\n    &gt;&gt;&gt; CENTERING = stemdiff.const.centering(\n    &gt;&gt;&gt;     ctype=1, csquare=30, cintensity=0.8)\n</code></pre>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>df : pandas DataFrame object\n    Database containing [filename, ShannonEntropy, XY-center]\n    of each datafile of 4D-STEM dataset.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">DATAFILES</span>, </span><span class=\"param\"><span class=\"n\">CENTERING</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.dbase.save_database", "modulename": "stemdiff.dbase", "qualname": "save_database", "type": "function", "doc": "<p>Save database, which contains [filenames, entropies and XY-centers]\nof all 4D-STEM datafiles; the dbase is saved as pickled object/zip-file.</p>\n\n<p>The database can be read by function <em>read_database</em>\nand used in the following calculations.</p>\n\n<p>This can save time, as the large databases do not have to be\ncalculated again and again if we fine-tune calculation parameters.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>df : pandas DataFrame object\n    This object is a database of all datafiles,\n    which contains [filenames, entropies and centers] of diffractograms\n    (the database is created by function stemdiff.dbase.calc_database).</p>\n\n<p>output_file : str\n    Filename of the output file (without extension).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>None.</p>\n\n<ul>\n<li>The output is the saved file with name [output_file].zip</li>\n<li>The output file = pickled data in zip format;\nthis file is read back as an input to other functions,\nsuch as calculation of PSF function and summation of datafiles.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">output_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.dbase.read_database", "modulename": "stemdiff.dbase", "qualname": "read_database", "type": "function", "doc": "<p>Read database, which contains [filenames, entropies and centers]\nof all 4D-STEM datafiles.</p>\n\n<p>The database is supposed to have been saved as pickled object/zip-file,\nwhich was created by functions <em>calc_database</em> and <em>save_database</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>input_file : str\n    Filename of the input file that contains the database.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>df : pandas DataFrame object\n    Database that has been read from disk.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.dbase.get_all_datafiles", "modulename": "stemdiff.dbase", "qualname": "get_all_datafiles", "type": "function", "doc": "<p>Get filenames and parameters of all datafiles\nfrom a database, which contains [filenames, entropies and centers]\nof all 4D-STEM datafiles; the dbase is saved as pickled object/zip-file. </p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>dbase : str\n    Filename of the database file\n    = zip-file containg pickled database object.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame iterator\n    The complete database/DataFrame is huge =&gt; return DataFrame iterator; <br />\n    the iterator gradually returns all items/datafiles from the database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dbase</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.dbase.get_high_S_files", "modulename": "stemdiff.dbase", "qualname": "get_high_S_files", "type": "function", "doc": "<p>Get filenames and parameters of high-entropy datafiles\nfrom a database, which contains [filenames, entropies and centers]\nof all 4D-STEM datafiles; the dbase is saved as pickled object/zip-file. </p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>dbase : str\n    Filename of the database file\n    = zip-file containg pickled database object. <br />\nS : float\n    Shannon entropy value;\n    if S is given, we get only the files with entropy &gt; S.\nP : float\n    Percent of files with the lowest entropy;\n    if P is given, we get only P% of files with the highest entropy.\nN : integer\n    Number of files with the lowest entropy;\n    if N is given, we get only N files with the highest entropy.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame iterator\n    The complete database/DataFrame is huge =&gt; return DataFrame iterator; <br />\n    the iterator gradually returns all items/datafiles with high entropy.</p>\n\n<h2 id=\"note\">Note:</h2>\n\n<p>Priority of parameters : S &gt; P &gt; N\n    i.e. if S is given, P and N are ignored etc.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dbase</span>, </span><span class=\"param\"><span class=\"n\">S</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">P</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">N</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.dbase.get_low_S_files", "modulename": "stemdiff.dbase", "qualname": "get_low_S_files", "type": "function", "doc": "<p>Get filenames and parameters of low-entropy datafiles\nfrom a database, which contains [filenames, entropies and centers]\nof all 4D-STEM datafiles; the dbase is saved as pickled object/zip-file. </p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>dbase : str\n    Filename of the database file\n    = zip-file containg pickled database object. <br />\nS : float\n    Shannon entropy value;\n    if S is given, we get only the files with entropy &lt; S.\nP : float\n    Percent of files with the lowest entropy;\n    if P is given, we get only P% of files with the lowest entropy.\nN : integer\n    Number of files with the lowest entropy;\n    if N is given, we get only N files with the lowest entropy.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame iterator\n    The complete database/DataFrame is huge =&gt; return DataFrame iterator; <br />\n    the iterator gradually returns all items/datafiles with a low entropy.</p>\n\n<h2 id=\"note\">Note:</h2>\n\n<p>Priority of parameters : S &gt; P &gt; N\n    i.e. if S is given, P and N are ignored etc.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dbase</span>, </span><span class=\"param\"><span class=\"n\">S</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">P</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">N</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.dbase.get_entropy_limit", "modulename": "stemdiff.dbase", "qualname": "get_entropy_limit", "type": "function", "doc": "<p>Determine Shannon entropy limit;\nwhich separates high- and low-entropy files;\n(the entropy limit can be determined from S or P or N parameter).</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>df : pandas DataFrame object\n    This object is a database of all 4D-STEM datafiles,\n    which contains [filenames, entropies and centers] of diffractograms.\nS : Shannon entropy\n    that separaters high- and low-S files;\n    (trivial case: the function just returns the value of S).\nP : Percent of files\n    that determines how many percent of high- or low-S files we want;\n    (here we calculate the S-value separating the high/low-S files and\n    the calculated value depends on parameter high_entropy_files below).\nN : Number of files\n    that determines how many high- or low-S files we want;\n    (here we calculate the S-value separating the high/low-S files and\n    the calculated value depends on parameter high_entropy_files below).\nhigh_entropy_files : boolean, optional, default=True.\n    * If the parameter is True, the S-value separates high-entropy files.\n    * If the parameter is False, the S-value separates low-entropy files.\n    * Example: if we have P=20, we can separate either\n      20% of the high-S files (if high_entropy_files = True)\n      or 20% of the low-S files (if the high_entropy_files = False).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>entropy limit : float\n    The value of Shannon entropy,\n    that separates high- and low-entropy files.</p>\n\n<h2 id=\"note\">Note:</h2>\n\n<p>Priority of parameters : S &gt; P &gt; N\n    i.e. if S is given, P and N are ignored etc.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">S</span>, </span><span class=\"param\"><span class=\"n\">P</span>, </span><span class=\"param\"><span class=\"n\">N</span>, </span><span class=\"param\"><span class=\"n\">high_entropy_files</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.dbase.calculate_entropy_histogram", "modulename": "stemdiff.dbase", "qualname": "calculate_entropy_histogram", "type": "function", "doc": "<p>Calculate parameters,\nwhich can be used for plotting the entropy histogram.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>df : pandas DataFrame object\n    This object is a database of (pre-selected) 4D-STEM datafiles,\n    which contains [filenames, entropies and centers] of diffractograms.\nbins : int\n    Number of bins ~ intervals of the histogram.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>counts, bins, pdf, cdf\n    * counts = array; number of files in bins\n    * bins = array containing bins ~ intervals ~ limits between values\n    * pdf = probability distribution function = counts normalized to 1\n    * cdf = cummulative distribution function - calculated by np.cumsum</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">bins</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.dbase.plot_entropy_histogram", "modulename": "stemdiff.dbase", "qualname": "plot_entropy_histogram", "type": "function", "doc": "<p>Create plot/histogram of entropy values of all datafiles\nand show it on the screen.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>df : pandas DataFrame object\n    Database containing all datafiles;\n    df object is obtained as the output from the function calc_database.</p>\n\n<p>bins : integer\n    Number of bins = intervals in the histogram; typical value is 100.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>None.\n    The result is the entropy histogram on the screen.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">bins</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.io", "modulename": "stemdiff.io", "type": "module", "doc": "<h2 id=\"stemdiffio\">stemdiff.io</h2>\n\n<p>Input/output functions for package stemdiff.</p>\n"}, {"fullname": "stemdiff.io.read_datafile", "modulename": "stemdiff.io", "qualname": "read_datafile", "type": "function", "doc": "<p>Read datafile from 2D-STEM detector into numpy array.\nAssumptions: 2D-STEM detector with dimensions DET_SIZE x DET_SIZE\n(where DET_FILE = stemdiff.const.DET_FILE = constant in stemdiff.const),\nwhich yields binary files with 16-bit intensity values.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>filename : string or pathlib object\n    Name of datafile from pixelated datector\n    that should be read into numpy 2D array.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>2D numpy array</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.io.show_datafile", "modulename": "stemdiff.io", "qualname": "show_datafile", "type": "function", "doc": "<p>Show datafile = diffractogram from 2D-STEM detector;\nthe datafile is shown as an image using matplotlib.pyplot.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>filename : str or Path\n    Name of datafile to be shown.\nintensity_cut : integer\n    For all pixels: if intensity &gt; intensity_cut: intensity=intensity_cut;\n    this reduces the strongest intensity of the central spot/primary beam.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Nothing; the output are the files and entropies shown on the screen.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">intensity_cut</span><span class=\"o\">=</span><span class=\"mi\">300</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.io.save_datafile", "modulename": "stemdiff.io", "qualname": "save_datafile", "type": "function", "doc": "<p>Save datafile = diffractogram from 2D-STEM detector;\nthe datafile is saved as a PNG-image using matplotlib.pyplot.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>filename : str or Path\n    Name of datafile to be shown.\noutput_image : str\n    Name of image to be saved (the full name will be output_image.png).\nintensity_cut : integer, optional, default=300\n    For all pixels: if intensity &gt; intensity_cut: intensity=intensity_cut;\n    this reduces the strongest intensity of the central spot/primary beam.\nitype : str ('8bit' or '16bit'), optional, default='8bit'\n     Type of the image: 8 or 16 bit grayscale. </p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Nothing; the output is the saved PNG-image in active directory.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">output_image</span>, </span><span class=\"param\"><span class=\"n\">intensity_cut</span><span class=\"o\">=</span><span class=\"mi\">300</span>, </span><span class=\"param\"><span class=\"n\">itype</span><span class=\"o\">=</span><span class=\"s1\">&#39;8bit&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.io.show_datafiles", "modulename": "stemdiff.io", "qualname": "show_datafiles", "type": "function", "doc": "<p>Show datafiles = diffractograms from 2D-STEM detector.\nThe images and their calculated Shannon entropies are shown one by one.\n[Enter] = next file, [Ctrl+C] = end of show (a bit hardcore, but working).</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>datafiles : pathlib.glob object or iterable (list, array, iterator)\n    Names of datafiles to be shown.\nintensity_cut : integer\n    For all pixels: if intensity &gt; intensity_cut: intensity=intensity_cut;\n    this reduces the strongest intensity of the central spot/primary beam.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Nothing; the output are the files and entropies shown on the screen.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">datafiles</span>, </span><span class=\"param\"><span class=\"n\">intensity_cut</span><span class=\"o\">=</span><span class=\"mi\">300</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.io.rescale_array", "modulename": "stemdiff.io", "qualname": "rescale_array", "type": "function", "doc": "<p>Rescale 2D numpy array (which represents an image).</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>arr : 2D numpy array\n    Numpy array representing DAT-file/image.\nR : integer\n    Rescale parameter: new_size_of the array = original_size * R</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>2D numpy array with new_size = original_size * R</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">R</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.io.find_array_center", "modulename": "stemdiff.io", "qualname": "find_array_center", "type": "function", "doc": "<p>Determine center of mass for 2D numpy array.\nArray center = mass center = intensity center ~ position of central spot.\nNote: for non-centrosymmetric images, central spot is NOT in array center.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>arr : numpy 2D array\n    Numpy 2D array, whose center (of mass ~ intensity) we want to get.\ncentral_square: integer, optional\n    Edge of central square, from which the center will be determined.\ncentral_intensity_coeff: float, optional, interval: 0--1\n    The intensity &lt; maximum_intensity * central_intensity_coeff\n    is regarded as 0 (background removal in central square).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>xc,yc = integers\n    Coordinates of the array center.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">central_square</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">central_intensity_coeff</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.io.reduce_array_size", "modulename": "stemdiff.io", "qualname": "reduce_array_size", "type": "function", "doc": "<p>The original size is cut to rsize, center of new array is in xc,yc.</p>\n\n<p>Reduce/cut size of 2D numpy array.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>arr : numpy 2D array\n    The original array, whose size should be reduced.\nrsize : integer\n    The size of reduced array.\nxc,yc : integers\n    The center of original array;\n    the reduced array is cut to rsize, center of new array is in xc,yc.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>2D numpy array\n    The array with reduced size.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">rsize</span>, </span><span class=\"param\"><span class=\"n\">xc</span>, </span><span class=\"param\"><span class=\"n\">yc</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.io.prepare_array_for_saving", "modulename": "stemdiff.io", "qualname": "prepare_array_for_saving", "type": "function", "doc": "<p>Prepare 2D numpy array (which contains a 2D-STEM datafile)\nfor showing/saving as grayscale image.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>arr : 2D numpy array\n    array or image object to save\nicut : integer\n    Cut of intensity;\n    if icut = 300, all image intensities &gt; 300 will be equal to 300.\nitype: string ('8bit'  or '16bit')\n    type of the image: 8 or 16 bit grayscale <br />\nR: integer\n    Rescale coefficient;\n    the input array is rescaled/enlarged R-times.\n    For typical 2D-STEM detector with size 256x256 pixels,\n    the array should be saved with R = 2 (or 4)\n    in order to get sufficiently large image for further processing.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>arr : 2D numpy array\n    modified array ready for showing or saving on a disk.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">icut</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">itype</span><span class=\"o\">=</span><span class=\"s1\">&#39;8bit&#39;</span>, </span><span class=\"param\"><span class=\"n\">R</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.io.show_array", "modulename": "stemdiff.io", "qualname": "show_array", "type": "function", "doc": "<p>Show 2D numpy array as grayscale image.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>arr : 2D numpy array\n    array or image object to save\nicut : integer\n    Cut of intensity;\n    if icut = 300, all image intensities &gt; 300 will be equal to 300.\nitype : string ('8bit'  or '16bit')\n    type of the image: 8 or 16 bit grayscale <br />\nR : integer\n    Rescale coefficient;\n    the input array is rescaled/enlarged R-times.\n    For typical 2D-STEM detector with size 256x256 pixels,\n    the array should be saved with R = 2 (or 4)\n    in order to get sufficiently large image for further processing.\ncmap : matplotlib.pyplot.cm object\n    Colormap for plotting of the array; default is 'gray'.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Nothing; the output is [output_image] saved on disk.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">icut</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">itype</span><span class=\"o\">=</span><span class=\"s1\">&#39;8bit&#39;</span>, </span><span class=\"param\"><span class=\"n\">R</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.io.save_array", "modulename": "stemdiff.io", "qualname": "save_array", "type": "function", "doc": "<p>Save 2D numpy array as grayscale image.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>arr : 2D numpy array\n    array or image object to save\noutput_image : string or pathlib object\n    name of the output/saved file\nicut : integer\n    Cut of intensity;\n    if icut = 300, all image intensities &gt; 300 will be equal to 300.\nitype: string ('8bit'  or '16bit')\n    type of the image: 8 or 16 bit grayscale <br />\nR: integer\n    Rescale coefficient;\n    the input array is rescaled/enlarged R-times.\n    For typical 2D-STEM detector with size 256x256 pixels,\n    the array should be saved with R = 2 (or 4)\n    in order to get sufficiently large image for further processing.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Nothing; the output is [output_image] saved on disk.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">output_image</span>, </span><span class=\"param\"><span class=\"n\">icut</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">itype</span><span class=\"o\">=</span><span class=\"s1\">&#39;8bit&#39;</span>, </span><span class=\"param\"><span class=\"n\">R</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.io.read_image", "modulename": "stemdiff.io", "qualname": "read_image", "type": "function", "doc": "<p>Read grayscale image into 2D numpy array.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>image_name : string or pathlib object\n    Name of image that should read into numpy 2D array.\nitype: string ('8bit'  or '16bit')\n    type of the image: 8 or 16 bit grayscale    </p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>2D numpy array</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image_name</span>, </span><span class=\"param\"><span class=\"n\">itype</span><span class=\"o\">=</span><span class=\"s1\">&#39;8bit&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.io.show_image", "modulename": "stemdiff.io", "qualname": "show_image", "type": "function", "doc": "<p>Read and display image from disk.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>image_name : string or pathlib object\n    name of the image to display\nitype : string ('8bit'  or '16bit')\n    type of the image: 8 or 16 bit grayscale\ncmap : string\n    colormap (any colormap know to matplotlib)</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Nothing; the output is image shown on screen.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image_name</span>, </span><span class=\"param\"><span class=\"n\">itype</span><span class=\"o\">=</span><span class=\"s1\">&#39;8bit&#39;</span>, </span><span class=\"param\"><span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.psf", "modulename": "stemdiff.psf", "type": "module", "doc": "<h2 id=\"stemdiffpsf\">stemdiff.psf</h2>\n\n<p>The calculation a 2D-PSF function from low-entropy 4D-STEM datafiles.</p>\n\n<p>PSF = Point Spread Function = XY-spread of the primary beam</p>\n"}, {"fullname": "stemdiff.psf.psf_from_lowS_files", "modulename": "stemdiff.psf", "qualname": "psf_from_lowS_files", "type": "function", "doc": "<p>Extract 2D-PSF from datafiles with low Shannon entropy S.\nPSF (= point-spread function) is taken from the central region/spot.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>DBASE : str or pathlib object\n    Filename of database containing\n    names of all datafiles and their Shannon entropy values.\nSUMMATION : summation object\n    Summation parameters; here we need the size/edge\n    of the central square, from which 2D-PSF will be determined.\nR : integer\n    Rescale coefficient;\n    PSF function is rescaled/enlarged R-times.\n    Typical values of R are 2 or 4; default is stemdiff.const.RESCALE.\nS : float\n    Shannon entropy value;\n    if S is given, PSF will be extracted only from files with entropy &lt; S.\nP : float\n    Percent of files with the lowest entropy;\n    if P is given, PSF will be extracted only from the P% of low-S files.\nN : integer\n    Number of files with the lowest entropy;\n    if N is given, PSF will be extracted only from those N files.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>2D numpy array\n    The array with the saved 2D-PSF function, which represents\n    the experimentally determined XY-spread of the primary beam.\n    The array is a sum of central areas/spots of input datafiles\n    (divided by number of summed datafiles to get reasonable scale).</p>\n\n<h2 id=\"note\">Note:</h2>\n\n<p>Priority of parameters : S &gt; P &gt; N\n    i.e. if S is given, P and N are ignored etc.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">DBASE</span>, </span><span class=\"param\"><span class=\"n\">SUMMATION</span>, </span><span class=\"param\"><span class=\"n\">R</span><span class=\"o\">=</span><span class=\"mi\">4</span>, </span><span class=\"param\"><span class=\"n\">S</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">P</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">N</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.psf.psf_from_datafiles", "modulename": "stemdiff.psf", "qualname": "psf_from_datafiles", "type": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>df: pandas DataFrame row iterator\n    DataFrame columns: DatafileName,Entropy,Xcenter,Ycenter.\nSUMMATION: summation object\n    Summation parameters; here we need the SUMMATION.psfsize\n    = edge of the central square, from which 2D-PSF will be determined.\n    If SUMMATION.psfsize is not given =&gt; take PSF from the whole array.\nR: integer\n    Rescale coefficient;\n    PSF function is rescaled/enlarged R-times.\n    Typical values of R are 2 or 4; default is stemdiff.const.RESCALE.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>2D numpy array\n    The array represents experimental PSF;\n    it is a sum of central areas/spots of input datafiles\n    (divided by number of summed datafiles to get reasonable scale).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">SUMMATION</span>, </span><span class=\"param\"><span class=\"n\">R</span><span class=\"o\">=</span><span class=\"mi\">4</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.psf.save_psf", "modulename": "stemdiff.psf", "qualname": "save_psf", "type": "function", "doc": "<p>Save PSF function;\nthe function is saved in the form of 2D-numpy array.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>arr : 2D-numpy array\n    The array with the saved 2D-PSF function, which represents\n    the experimentally determined XY-spread of the primary beam. \noutput_file : str\n    Name of the output file (without extension);\n    the saved file will be named [output_file].npy.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>None.\n    The result is the saved array in numpy format = [output_file].npy</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">output_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.psf.read_psf", "modulename": "stemdiff.psf", "qualname": "read_psf", "type": "function", "doc": "<p>Read PSF function;\nthe function is saved in the form of 2D-numpy array.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>input_file : str\n    The saved file with the PSF function;\n    the function is saved as file in numpy format = [input_file].npy.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>2D-numpy array\n    The array with the saved 2D-PSF function, which represents\n    the experimentally determined XY-spread of the primary beam.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.psf.plot_psf", "modulename": "stemdiff.psf", "qualname": "plot_psf", "type": "function", "doc": "<p>Show plot of PSF function.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>arr : 2D numpy array\n    The array with the saved 2D-PSF function, which represents\n    the experimentally determined XY-spread of the primary beam. \nplt_type : string\n    Either '2D' or '3D' - type of the plot.\nplt_size : integer, optional, default=None\n    The size of the plot:\n    if plt_size is given, the function plots only the central square\n    with size = plt_size; otherwise it plots the whole array.\noutput : str, optional, default=None\n    The name of the output file:\n    if [output] is given, the function also saves the plot\n    with a filename [output].png; otherwise the plot is just shown.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Nothing.\n     The function just shows the plot of PSF in 2D or 3D.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">plt_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;2D&#39;</span>, </span><span class=\"param\"><span class=\"n\">plt_size</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">output</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.radial", "modulename": "stemdiff.radial", "type": "module", "doc": "<h2 id=\"stemdiffradial\">stemdiff.radial</h2>\n\n<p>The conversion of a 2D powder diffraction pattern\nto a 1D powder diffraction pattern = radially averaged intensity distribution.</p>\n"}, {"fullname": "stemdiff.radial.calc_radial_distribution", "modulename": "stemdiff.radial", "qualname": "calc_radial_distribution", "type": "function", "doc": "<p>Calculate 1D-radially averaged distrubution profile\nfrom 2D-PNBD diffraction pattern.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>arr : 2D-numpy array\n    The numpy array which contains the 2D-PNBD pattern.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>radial_distance, intensity : 1D numpy arrays\n    * radial_distance = distances from the center of 2D-PNBD [pixels]\n    * intensity = intensities at given distances [arbitrary units]</p>\n\n<h2 id=\"note\">Note</h2>\n\n<p>The plot of [radial_distance, intensity] = 1D-radial profile\ncorresponding to the input 2D-PNBD diffraction pattern.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.radial.save_radial_distribution", "modulename": "stemdiff.radial", "qualname": "save_radial_distribution", "type": "function", "doc": "<p>Save 1D-radially averaged distrubution profile,\nwhich is calculated from 2D-PNBD diffraction pattern, as a TXT-file.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>arr : 2D-numpy array\n    The numpy array which contains the 2D-PNBD pattern.\nfilename : str\n    Name of the output file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>None.\n    The output of the function is the saved file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.radial.read_radial_distribution", "modulename": "stemdiff.radial", "qualname": "read_radial_distribution", "type": "function", "doc": "<p>Read 1D-radially averaged distrubution profile from a TXT-file.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>filename : str\n    Name of the input file;\n    the file is expected to contain two columns [distance, intensity].</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>arr : 2D-numpy array\n    The array containing two columns [distance, intensity].</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.radial.plot_radial_distributions", "modulename": "stemdiff.radial", "qualname": "plot_radial_distributions", "type": "function", "doc": "<p>Plot several 1D-radial distrubution files in one graph.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>radial_distribution_files : 2D-list \n    * list with several rows containing [filename, plot-style, name]\n    * filename = name of the TXT-file to plot\n    * plot-style = matplotlib.pyplot style, such as 'r-' (red line)\n    * name = name of the data, which will appear in the plot legend\nxlimit : int\n    maximum of the X-axis\nylimit : int\n    maximum of the Y-axis\noutput : int, optional, default=None\n    Name of the output file;\n    if the output argument is given,\n    the plot is not only shown on screen, but also saved in [output] file. </p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>None.\n    The output is the plot on screen\n    (and also in [output] file if the output argument is given).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">radial_distribution_files</span>, </span><span class=\"param\"><span class=\"n\">xlimit</span>, </span><span class=\"param\"><span class=\"n\">ylimit</span>, </span><span class=\"param\"><span class=\"n\">output</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.sum", "modulename": "stemdiff.sum", "type": "module", "doc": "<h2 id=\"stemdiffsum\">stemdiff.sum</h2>\n\n<p>The summation of 4D-STEM datafiles to create one 2D powder diffraction file.</p>\n"}, {"fullname": "stemdiff.sum.sum_all", "modulename": "stemdiff.sum", "qualname": "sum_all", "type": "function", "doc": "<p>Sum all datafiles from 4D-STEM dataset.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>DBASE : str or pathlib object\n    Name of the database file that contains\n    [filename, entropy and XY-center] of each datafile of 4D-STEM dataset.</p>\n\n<p>SUMMATION : summation object\n    The summation object contains parameters for the summation.\n    The object is usually defined in advance as follows:</p>\n\n<pre><code>    &gt;&gt;&gt; import stemdiff.const\n    &gt;&gt;&gt; SUMMATION = stemdiff.const.summation(\n    &gt;&gt;&gt;     psfsize=130,imgsize=125,iterate=30)\n\nMore information about the summation parameters:\n\n    &gt;&gt;&gt; import stemdiff.const\n    &gt;&gt;&gt; help(stemdiff.const.summation)\n</code></pre>\n\n<p>R : int, optional, default=stemdiff.const.RESCALE\n    * The final diffractogram size = size-of-original-array * RESCALE.\n    * The RESCALE parameter is defined/imported from stemdiff.const\n    * The optimal value of R is 4 ~ we use 4-times upscaling.\n    * It is not recommened to change this default.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>arr : 2D-numpy array\n    The array represents the calculated 2D-PNBD diffraction pattern.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">DBASE</span>, </span><span class=\"param\"><span class=\"n\">SUMMATION</span>, </span><span class=\"param\"><span class=\"n\">R</span><span class=\"o\">=</span><span class=\"mi\">4</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.sum.sum_highS", "modulename": "stemdiff.sum", "qualname": "sum_highS", "type": "function", "doc": "<p>Sum high-entropy datafiles from 4D-STEM dataset;\nthe number of high-entropy files is determined by parameter S, P or N.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>DBASE : str or pathlib object\n    Name of the database file that contains\n    [filename, entropy and XY-center] of each datafile of 4D-STEM dataset.</p>\n\n<p>SUMMATION : summation object\n    The summation object contains parameters for the summation.\n    The object is usually defined in advance as follows:</p>\n\n<pre><code>    &gt;&gt;&gt; import stemdiff.const\n    &gt;&gt;&gt; SUMMATION = stemdiff.const.summation(\n    &gt;&gt;&gt;     psfsize=130,imgsize=125,iterate=30)\n\nMore information about the summation parameters:\n\n    &gt;&gt;&gt; import stemdiff.const\n    &gt;&gt;&gt; help(stemdiff.const.summation)\n</code></pre>\n\n<p>R : int, optional, default=stemdiff.const.RESCALE\n    * The final diffractogram size = size-of-original-array * RESCALE.\n    * The RESCALE parameter is defined/imported from stemdiff.const\n    * The optimal value is R = 4, i.e. we use 4-times upscaling.\n    * It is not recommened to change this default.</p>\n\n<p>S : Shannon entropy\n    that separaters high- and low-S files;\n    (trivial case: the function just returns the value of S).</p>\n\n<p>P : Percent of files\n    that determines how many percent of high- or low-S files we want;\n    (here we calculate the S-value separating the high/low-S files and\n    the calculated value depends on parameter high_entropy_files below).</p>\n\n<p>N : Number of files\n    that determines how many high- or low-S files we want;\n    (here we calculate the S-value separating the high/low-S files and\n    the calculated value depends on parameter high_entropy_files below).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>arr : 2D-numpy array\n    The array represents the calculated 2D-PNBD diffraction pattern.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">DBASE</span>, </span><span class=\"param\"><span class=\"n\">SUMMATION</span>, </span><span class=\"param\"><span class=\"n\">R</span><span class=\"o\">=</span><span class=\"mi\">4</span>, </span><span class=\"param\"><span class=\"n\">S</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">P</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">N</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.sum.sum_highS_deconv", "modulename": "stemdiff.sum", "qualname": "sum_highS_deconv", "type": "function", "doc": "<p>Sum high-entropy datafiles from 4D-STEM dataset with deconvolution.</p>\n\n<ul>\n<li>the number of high-S files is determined by parameter S, P or N</li>\n<li>the number of deconvolution iterations is in SUMMATION parameter</li>\n</ul>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>DBASE : str or pathlib object\n    Name of the database file that contains\n    [filename, entropy and XY-center] of each datafile of 4D-STEM dataset.\n    The database is usually created by functions in stemdiff.dbase module.</p>\n\n<p>SUMMATION : summation object\n    The summation object contains parameters for the summation.\n    The object is usually defined in advance as follows:</p>\n\n<pre><code>    &gt;&gt;&gt; import stemdiff.const\n    &gt;&gt;&gt; SUMMATION = stemdiff.const.summation(\n    &gt;&gt;&gt;     psfsize=130,imgsize=125,iterate=30)\n\nMore information about the summation parameters:\n\n    &gt;&gt;&gt; import stemdiff.const\n    &gt;&gt;&gt; help(stemdiff.const.summation)\n</code></pre>\n\n<p>PSF : str or pathlib object\n    Name of the file that contains 2D-PSF function.\n    The PSF is saved in NPY-file (numpy array in numpy format).\n    The PSF is usually created by: stemdiff.psf.psf_from_lowS_files</p>\n\n<p>R : int, optional, default=stemdiff.const.RESCALE\n    * The final diffractogram size = size-of-original-array * RESCALE.\n    * The RESCALE parameter is defined/imported from stemdiff.const\n    * The optimal value is R = 4, i.e. we use 4-fold upscaling.\n    * It is not recommened to change this default.</p>\n\n<p>S : Shannon entropy\n    that separaters high- and low-S files;\n    (trivial case: the function just returns the value of S).</p>\n\n<p>P : Percent of files\n    that determines how many percent of high- or low-S files we want;\n    (here we calculate the S-value separating the high/low-S files and\n    the calculated value depends on parameter high_entropy_files below).</p>\n\n<p>N : Number of files\n    that determines how many high- or low-S files we want;\n    (here we calculate the S-value separating the high/low-S files and\n    the calculated value depends on parameter high_entropy_files below).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>arr : 2D-numpy array\n    The array represents the calculated 2D-PNBD diffraction pattern.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">DBASE</span>, </span><span class=\"param\"><span class=\"n\">SUMMATION</span>, </span><span class=\"param\"><span class=\"n\">PSF</span>, </span><span class=\"param\"><span class=\"n\">R</span><span class=\"o\">=</span><span class=\"mi\">4</span>, </span><span class=\"param\"><span class=\"n\">S</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">P</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">N</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.sum.sum_4Dstem_datafiles", "modulename": "stemdiff.sum", "qualname": "sum_4Dstem_datafiles", "type": "function", "doc": "<p>Sum input datafiles from a 4D-STEM dataset.\nThis function can be called directly, but typically it is called\nfrom functions <em>sum_all</em>, <em>sum_highS</em>, and <em>sum_highS_deconv</em>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>df: pandas DataFrame row iterator\n    DataFrame columns: DatafileName,Entropy,Xcenter,Ycenter.\nR : integer\n    Rescale coefficient;\n    the size of the final array is rescaled/multiplied by factor R.\n    If PSF is given, the rescaling is performed before deconvolution.\n    Note: PSF should the same rescale coefficient as given here!\nPSF : 2D numpy array\n    PSF = point spread function for deconvolution\nitr : integer \n    Number of iterations during R-L deconvolution\nimgsize: integer\n    Size of array read from the detector is reduced to imgsize.\n    If imgsize is given, we sum only the central square with edge=imgsize.\n    Smaller central area gives higher speed during deconvolution,\n    while the outer area usually contains just the weakest diffractions.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>final_arr : 2D numpy array\n    The array is a sum of datafiles;\n    if the datafiles are pre-filtered, we get sum of filtered datafiles,\n    if PSF is given, we get sum of datafiles with PSF deconvolution.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">R</span><span class=\"o\">=</span><span class=\"mi\">4</span>, </span><span class=\"param\"><span class=\"n\">PSF</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">itr</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">imgsize</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.sum.save_results", "modulename": "stemdiff.sum", "qualname": "save_results", "type": "function", "doc": "<p>Save results of summation (final 2D-image + optional 1D-radial profile).</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>arr : 2D numpy array\n    Array representing 2D-PNBD diffractogram.\noutput : string\n    Filename of output 2D-diffratogram and its 1D-radial distribution;\n    name of 2D-diffractogram will be [output.png],\n    name of 1D-radial distribution will be [output.txt].\nicut : integer, optional, default=300\n    Cut of intensity;\n    if icut = 300, all image intensities &gt; 300 will be set equal to 300.\nitype : string ('8bit'  or '16bit'), optional, default='8bit'\n    Type of the image with 2D-PNBD diffractogram: 8 or 16 bit grayscale. <br />\nrdist : boolean, optional, default =True\n    If rdist=True, calculate and save also 1D-radial distribution.\n    The saved file = [output].txt, where output is the argument above.\nshow : boolean, optional, default = False</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>None.\n    The outputs are saved 2D-diffractogram and its 1D-profile.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">output</span>, </span><span class=\"param\"><span class=\"n\">icut</span><span class=\"o\">=</span><span class=\"mi\">300</span>, </span><span class=\"param\"><span class=\"n\">itype</span><span class=\"o\">=</span><span class=\"s1\">&#39;8bit&#39;</span>, </span><span class=\"param\"><span class=\"n\">rdist</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">show2d</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();